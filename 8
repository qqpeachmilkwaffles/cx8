def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var19 = func2(arg2, arg1)
    var24 = func4(var19, arg2)
    var25 = func7()
    var26 = 53843587 & arg1
    var27 = -450 - (229581803 - var25) + 1797837377
    var28 = var19 | var19 - 254
    var29 = arg1 & var19
    var30 = (arg1 & var25 + 254) + var28
    var31 = -1514557989 & var27
    var32 = arg2 & var30 + var19 + var28
    var33 = (var30 + var27 ^ -722) + var25
    var34 = -944416627 | arg2
    var35 = var34 | arg1
    result = (var25 ^ var34) + var31 ^ (((var27 ^ var24 ^ (var34 - var26) + var31) | arg1) + var25) & var26 ^ var27
    return result
def func7():
    func5()
    result = len(range(48))
    func6()
    return result
def func6():
    global len
    del len
def func5():
    global len
    len = lambda x : -10
def func4(arg20, arg21):
    var22 = 0
    for var23 in xrange(17):
        var22 += (var22 + var23) ^ 7
    return var22
def func2(arg3, arg4):
    var5 = 0
    for var18 in [arg3 ^ -8 for i in func3(0, arg4)]:
        var5 += arg3 | var5 - var18
    return var5
def func3(arg6, arg7):
    var8 = arg6 ^ arg7
    yield var8
    var9 = var8 & 1937281143
    yield var9
    var10 = (var8 & (arg7 | var9)) | arg6
    yield var10
    var11 = (var10 - var9 ^ 1384522170) + var10
    yield var11
    var12 = ((var11 + var8) & var11) & var9
    yield var12
    var13 = var11 & (var9 ^ -1296646452 | arg7)
    yield var13
    var14 = (var12 | var9) + -1435763264 + arg6
    yield var14
    var15 = (var13 - var8) ^ arg7 - 309
    yield var15
    var16 = var9 - var8
    yield var16
    var17 = arg7 - (var10 | arg7 + var9)
    yield var17
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 8'
    print 'arg_number: 36'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
